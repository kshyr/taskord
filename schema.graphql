schema {
  query: QueryRoot
  mutation: MutationRoot
  subscription: SubscriptionRoot
}

type AccessToken {
  token: String!
  expiresIn: DateTime!
}

"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime

type MutationRoot {
  register(username: String!, email: String!, password: String!): User!
  authorize(username: String!, password: String!): UserWithTokens!
  refreshToken: AccessToken!
  createProject(name: String!, description: String, userId: UUID!): Project!
  updateProject(id: UUID!, name: String, description: String, taskIds: [UUID!], tagIds: [UUID!]): Project!
  deleteProject(id: UUID!): Project!
  createTag(name: String!, userId: UUID!): Tag!
  updateTag(id: UUID!, name: String): Tag!
  createTask(name: String!, projectId: UUID, userId: UUID!, description: String, status: Int, priority: Int, dueDate: DateTime): Task!
  updateTask(id: UUID!, name: String, projectId: UUID, description: String, status: Int, priority: Int): Task!
  deleteTask(id: UUID!): Task!
}

type Project {
  id: UUID!
  name: String!
  description: String!
  user: User!
  tags: [Tag!]!
  tasks: [Task!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type QueryRoot {
  projects(userId: UUID!): [Project!]!
  projectById(id: UUID!): Project!
  tags(userId: UUID!): [Tag!]!
  tasks(userId: UUID!): [Task!]!
}

type SubscriptionRoot {
  value(condition: Int!): Int!
}

type Tag {
  id: UUID!
  user: User!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Task {
  id: UUID!
  project: Project
  userId: UUID!
  name: String!
  description: String
  status: Int!
  priority: Int!
  dueDate: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

type User {
  id: UUID!
  username: String!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserWithTokens {
  id: UUID!
  username: String!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  accessToken: AccessToken!
  refreshToken: String!
}

"""
A UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as
Strings within GraphQL. UUIDs are used to assign unique identifiers to
entities without requiring a central allocating authority.

# References

* [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)
* [RFC4122: A Universally Unique IDentifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)
"""
scalar UUID

